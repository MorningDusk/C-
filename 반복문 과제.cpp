/*
[ 문제 1 ] (100점) 두 개의 정수 M과 N을 입력받아서, 입력받은 두 정수를 포함하여 그 사이에
존재하는 2의 배수와 3의 배수의 개수와 합을 각각 출력하시오.
 - M>N, N>M의 관계가 가능함
 - M=N (M과N이 동일) 경우는 없다고 가정한다. 
 - 2의 배수는 1개 이상 있다고 가정한다. 3의 배수도 마찬가지 이다. 
 - 2의 배수는 작은 수부터 차례로 출력한다. 3의 배수도 마찬가지 이다. 
 - 힌트: 2의 배수에 대한 문제를 먼저 해결하시오.
*/

#include<stdio.h>

int main() {

	int num1, num2, n = 0, m = 0, sum1 = 0, sum2 = 0, cnt1 = 0, cnt2 = 0, i;	//변수 선언
	scanf("%d %d", &num1, &num2);		//변수 입력

	if (num1 > num2) {		//첫 변수가 더 크면
		n = num1;		//n에 첫 변수 대입
		m = num2;		//m에 두 번째 변수 대입
	}
	else {		//두 번째 변수가 크면
		m = num1;		//m에 첫 변수 대입
		n = num2;		//n에 두 번째 변수 대입
	}

	for (i = m; i <= n; i++) {		//m과 n값 사이를 반복
		if (i % 2 == 0) {		//값들이 짝수이면
			printf(" %d", i);		//짝수들 출력
			sum1 += i;		//짝수들끼리 더한다
			cnt1++;		//짝수일 때만 1 증가
		}
	}
	printf(" cnt=%d sum=%d\n", cnt1, sum1);		//몇 개 있는지, 더한 값들이 무엇인지 값 출력

	for (i = m; i <= n; i++) {		//m과 n값 사이를 반복
		if (i % 3 == 0) {		//값들이 3의 배수이면
			printf(" %d", i);		//3의 배수값 출력
			sum2 += i;		//3의 배수끼리 더한다
			cnt2++;		//3의 배수일 때만 1 증가
		}
	}
	printf(" cnt=%d sum=%d\n", cnt2, sum2);		//몇 개 있는지, 더한 값들이 무엇인지 값 출력

	
	return 0;
}

/*
[ 문제 2 ] (100점) 양의 정수 M, N을 입력받는다. M과 N의 대소는 정해져 있지 않다. 
M ≦ N 인 경우, M 이상 N 이하의 정수 중 약수의 개수가 짝수 인 수의 개수를 출력하시오.
 N ≦ M 인 경우도 비슷한 방법으로 해결하시오. 1 ≦ M ≦ 20억, 1 ≦ N ≦ 20억
*/

#include<stdio.h>

int main() {

	int num1, num2, n = 0, m = 0, i, j, cnt, even = 0;	//변수 선언
	scanf("%d %d", &num1, &num2);		//변수 입력

	if (num1 > num2) {		//첫 변수가 더 크면
		n = num1;		//n에 첫 변수 대입
		m = num2;		//m에 두 번째 변수 대입
	}
	else {		//두 번째 변수가 크면
		m = num1;		//m에 첫 변수 대입
		n = num2;		//n에 두 번째 변수 대입
	}

	for (i = m; i <= n; i++) {		//m과 n 사이의 값에 대해
		cnt = 0;		//기본 갯수를 일단 0으로 설정
		for (j = 1; j <= i; j++) {		//1과 i 사이의 값들에 대해
			if (i % j == 0) {		//i가 j의 약수이면
				cnt++;		//기본 갯수를 1 더한다
			}
		}
		if (cnt % 2 == 0)		//기본 갯수가 짝수이면
			even++;		//짝수 세는 변수를 1 더한다
	}

	printf("%d", even);		//짝수 세는 변수 출력

	return 0;
}

/*
[ 문제 3 ] (100점) 양의 정수 N을 입력 받아, 아래와 같이 다이아몬드를 출력하시오. - 중첩 for 문을 이용하시오.
 - 자릿수에 맞게 공백문자 출력
 - 각 줄의 마지막 별표 다음에는 공백 문자 없음
*/

#include<stdio.h>

int main() {

	int num, i, j;		//변수 선언
	scanf("%d", &num);		//변수 입력

	for (i = 0; i < num; i++) {		//윗부분 삼각형의 각 행에 대하여
		for (j = num - 1; j > i; j--) {		//공백 출력
			printf(" ");
		}
		for (j = 0; j < 2 * i + 1; j++) {	//2 * i + 1개의 별 출력
			printf("*");
		}
		printf("\n");		//개행 문자 출력
	}

	for (i = 1; i < num; i++) {		//아랫부분 삼각형의 각 행에 대하여
		for (j = 0; j < i; j++) {		//i개의 공백 출력
			printf(" ");
		}

		for (j = 2 * num - 1; j > 2 * i; j--) {		//2 * num - 1개의 별 출력
			printf("*");
		}
		printf("\n");		//개행 문자 출력
	}

	return 0;
}

/*
[ 문제 4-2 ] (100점) 찾기 원하는 0이 아닌 한 자리 정수 T를 입력 받는다. 그 후 한 자리 혹은
여러 자리를 갖는 정수를 0이 나오기 전까지 지속적으로 입력 받은 다음 입력 받은 정수들에 T가
등장한 횟수, T 보다 작은 수가 등장한 횟수, T 보다 큰 수가 등장한 횟수를 출력하는 프로그램을
작성하시오. 이 때, 마지막에 입력된 0은 무시되며, 입력되는 수는 모두 양수라고 가정한다.
*/

#include<stdio.h>

int main() {

	int find, ans = 0, big = 0, small = 0, n, m;		//변수 선언
	scanf("%d", &find);		//찾기 원하는 정수 입력

	while (1) {		//무한반복 설정
		scanf("%d", &n);		//정수 입력
		if (n == 0)		//0이 입력되면
			break;		//반복문 종료
		while (n > 0) {		//입력된 정수가 0보다 큰 동안
			m = n % 10;		//일의 자리 추출
			if (m > find)		//추출된 값이 찾기 원하는 정수보다 클 때
				big++;		//big 변수 1 증가
			else if (m < find)		//추출된 값이 찾기 원하는 정수보다 작을 때
				small++;		//small 변수 1 증가
			else if (m == find)		//추출된 값이 찾기 원하는 정수와 같을 때
				ans++;		//ans 변수 1 증가
			n /= 10;		//입력된 정수를 10으로 계속 나눈다
		}
	}
	printf("%d %d %d", ans, small, big);		//변수 출력

	return 0;
}

/*
[ 문제 5-3 ] (100점) 정수 N을 입력 받아 - 자리수가 짝수인 수들만 역순으로 만든 수를 출력하시오. 그런 다음, - 자리수가 홀수인 수들만 역순으로 만든 수를 출력하시오.
*/

#include<stdio.h>

int main() {

	int n, inv_e = 0, inv_o = 0, m;		//변수 선언
	scanf("%d", &n);		//정수 입력

	while (n > 0) {		//입력된 정수가 0보다 큰 동안
		m = n % 10;		//일의 자리 추출
		if (m % 2 == 0)		//추출한 수가 짝수이면
			inv_e = inv_e * 10 + m;		//자리수가 짝수인 수들만 역순으로 만든 수에 넣는다
		else		//추출한 수가 홀수이면
			inv_o = inv_o * 10 + m;		//자리수가 홀수인 수들만 역순으로 만든 수
		n /= 10;		//입력된 정수를 10으로 나눈다
	}
	printf("%d %d", inv_e, inv_o);		//역순 값들을 출력

	return 0;
}

/*
[ 문제 6-2 ] (100점) 삼각형 높이를 나타내는 N을 종료 조건 시까지 반복해서 입력받고, 앞의 문
제(문제 1-1)와 동일한 사각형 모양을 순서대로 출력하는 프로그램을 작성하시오.
 (단, 2 <= N <= 20)
 - 종료조건: 0, 1, 음수, 3의 배수 입력
*/

#include<stdio.h>

int main() {

	int n, i, j, k;		//변수 선언

	while (1) {		//무한반복 실행
		scanf("%d", &n);		//정수 입력
		if (n <= 1 || n % 3 == 0)		//정수가 1보다 작거나 3의 배수이면
			break;		//무한반복 종료
		for (j = 1; j <= (n - 1); j++)		//첫 줄에 관하여
			printf(" ");		//n-1에 공백 출력
		printf("X");		//X 하나 가운데에 출력
		printf("\n");		//개행 문자 출력
		for (i = 1; i <= (n - 2); i++) {		//다음 줄부터 각 행에 관하여
			for (j = 1; j <= (n - i - 1); j++)		//삼각형 밖에는
				printf(" ");		//공백 출력
			printf("X");		//그 외에는 X 출력
			for (j = 1; j <= 2 * i - 1; j++)		//X 삼각형보다 작은 O 삼각형을 만들어서 안을 채운다
				printf("O");		//그 자리에 O 출력
			printf("X");		//그 외에는 X 출력
			printf("\n");		//개행 문자 출력
		}
		for (k = 1; k <= (2 * n - 1); k++)		//마지막 행에 관하여
			printf("X");		//나머지를 X로 채운다
		printf("\n");		//개행 문자 출력
	}

	return 0;
}